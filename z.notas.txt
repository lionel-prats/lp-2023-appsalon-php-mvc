VIDEO 444 

npm install -> para instalar node_modules con las dependencias que vamos a necesitar (por default ya teníamos el package.json) 

npm run gulp -> para escuchar por cambios en archivos .scss, .js, imagenes, etc.

-----

VIDEO 445 

composer init -> para crear el composer.json (tendra las dependencias de PHP, no las del frontend ni las de NPM, esas estan en el package.json)

configuracion en la consola vvv 

- Package name (<vendor>/<name>) [user/appsalon-php-mvc]: lionelprats/appsalon-php-mvc
- Description []: Proyecto PHP 8.1.10, MVC, SQL SASS, Gulp
- Author [lionel-prats <lionel.prats.c@gmail.com>, n to skip]: 
- Minimum Stability []: 
- Package Type (e.g. library, project, metapackage, composer-plugin) []: project
- License []: 
- Would you like to define your dependencies (require) interactively [yes]? no
- Would you like to define your dev dependencies (require-dev) interactively [yes]? no
- Add PSR-4 autoload mapping? Maps namespace "Lionelprats\AppsalonPhpMvc" to the entered relative path. [src/, n to skip]: n
- Do you confirm generation [yes]? yes

con esto creamos el composer.json en la raiz del proyecto 

* luego agregamos los namespaces para acceder a las clases del proyecto 
* luego corremos composer update, ya que modificamos el composer.json (con esto se crea la carpeta /vendor con el archivo autoload.php) y se modifica el composer.lock

* cd public
* php -S localhost:3001 para arrancar el servidor de desarrollo (en este caso, en el puerto 3001)

-----

VIDEO 448 

SASS - nueva sintaxis (explicion en el VIDEO 167) vvv

* dentro de cada subcarpeta de la carpeta /src/scss...
* debemos tener un archivo _index.scss 
* en este archivo _index.scss "haremos un forward" a todos los archivos "hermanos" (es decir, a todos los archivos dentro de la misma subcarpeta) vvv 

@forward "archivo1";
@forward "archivo2";

* en app.scss (el archivo principal de SASS, ubicada en /src/scss) "hacemos un use" a cada subcarpeta dentro /src/scss vvv 

@use 'base';
@use 'layout';

----- 

VIDEO 450 

propiedades CSS vvv 

flex: 0 0 10rem;
shortcut for flex-grow, flex-shrink and flex-basis

all:unset -> resetea todas las propiedades por defecto de un elemento html

-----

VIDEO 456

* creé la base appsalon_mvc con tableplus 

name: appsalon_mvc
Encoding: utf_8
Collation: utf8_general_ci

* creacion tabla usuarios desde WorkBench (para evitar problemas que tiene tableplus para crear tablas)

columna id vvv 

Column Name   -> id 
Datatype      -> int(11)
PK            -> OK -> primary key
NN            -> OK -> not null 
AI            -> OK -> auto increment 

*** luego agregue las columnas nombre, apellido, email, telefono, admin, confirmado y token

*** codigo SQL para la creacion de la tabla (generado por Workbench) vvv 

CREATE TABLE `appsalon_mvc`.`usuarios` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(60) NULL,
  `apellido` VARCHAR(60) NULL,
  `email` VARCHAR(30) NULL,
  `telefono` VARCHAR(10) NULL,
  `admin` TINYINT(1) NULL,
  `confirmado` TINYINT(1) NULL,
  `token` VARCHAR(15) NULL,
  PRIMARY KEY (`id`)
);

-----

VIDEO 457

* creacion tabla servicios desde WorkBench (para evitar problemas que tiene tableplus para crear tablas) 

*** codigo SQL para la creacion de la tabla (generado por Workbench) vvv 

CREATE TABLE `appsalon_mvc`.`servicios` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(60) NULL,
  `precio` DECIMAL(5,2) NULL, // 5 digitos total maximo; 2 digitos total parte decimal
  PRIMARY KEY (`id`)
);

*** insertando algunos registros vvv

INSERT INTO `servicios` (`id`, `nombre`, `precio`) VALUES
(1, 'Corte de Cabello Mujer', 90.00),
(2, 'Corte de Cabello Hombre', 80.00),
(3, 'Corte de Cabello Niño', 60.00),
(4, 'Peinado Mujer', 80.00),
(5, 'Peinado Hombre', 60.00),
(6, 'Peinado Niño', 60.00),
(7, 'Corte de Barba', 60.00),
(8, 'Tinte Mujer', 300.00),
(9, 'Uñas', 400.00),
(10, 'Lavado de Cabello', 50.00),
(11, 'Tratamiento Capilar', 150.00);

-----

VIDEO 458

* creacion tabla citas 

*** codigo SQL para la creacion de la tabla vvv 

CREATE TABLE citas (
  id INT(11) NOT NULL AUTO_INCREMENT,
  fecha DATE NULL,
  hora TIME NULL,
  usuarioId INT(11),
  PRIMARY KEY (id),
  FOREIGN KEY (usuarioId) REFERENCES usuarios(id)
);

-----

VIDEO 459

* creacion tabla citasServicios 

*** codigo SQL para la creacion de la tabla vvv 

CREATE TABLE citasServicios (
  id INT(11) NOT NULL AUTO_INCREMENT,
  citaId INT(11),
  servicioId INT(11),
  PRIMARY KEY (id),
  FOREIGN KEY (citaId) REFERENCES citas(id),
  FOREIGN KEY (servicioId) REFERENCES servicios(id)
);

*** notar que la tabla se creo como "citasservicios" (con la "s" de "servicios" en minuscula) 

*** z.foreigns_keys_workbench.PNG -> captura de las preguntas del VIDEO 459, donde un alumno muestra como definir foreigns keys de la tabla citasServicios "manualmente" desde workbench  

*** desde wirkbench, genere las foreign keys manualmente, ya que si bien todo funcionaba, habian dando vueltas unos nombres raros en el apartade de foreigns keys de workbench 
*** este es el codigo SQL para editar los foreigns keys de ambas tablas tabla vvv

ALTER TABLE `appsalon_mvc`.`citas` 
DROP FOREIGN KEY `citas_ibfk_1`;
ALTER TABLE `appsalon_mvc`.`citas` 
ADD CONSTRAINT `usuarioId`
FOREIGN KEY (`usuarioId`)
REFERENCES `appsalon_mvc`.`usuarios` (`id`);

ALTER TABLE `appsalon_mvc`.`citasservicios` 
DROP FOREIGN KEY `citasservicios_ibfk_1`,
DROP FOREIGN KEY `citasservicios_ibfk_2`;
ALTER TABLE `appsalon_mvc`.`citasservicios` 
ADD CONSTRAINT `citaId`
FOREIGN KEY (`citaId`)
REFERENCES `appsalon_mvc`.`citas` (`id`),
ADD CONSTRAINT `servicioId`
FOREIGN KEY (`servicioId`)
REFERENCES `appsalon_mvc`.`servicios` (`id`);

-----

VIDEO 460 

*** NOW() -> funcion SQL 
*** en un campo DATE, retorna la fecha actual 
*** en un campo TIME, retorna la hora actual (supongo que la toma del servidor, pero en las pruebas de este video coincide exactamente con la hora real de Argentina)

Restricciones de Integridad Referencial...

Para permitir elimiar un usuario por mas que sea FK de registros en otras tablas (el problema que habia con vendedores y propiedades en Bienes Raices) tenemos varias opciones vvv 

vamos a solucionar ese problema con los registros de las tabla usuarios y citas vvv 

en Table Plus vvv 

CASCADE -> eliminando un registro padre, se eliminan los registros dependientes

1. editar la FK usuarioId de citas
2 On Update (que va a pasar cuando el usuario se edite...) -> CASCADE
3 On Delete (que va a pasar cuando el usuario se elimine...) -> CASCADE

*** con CASCADE, cuando elimino un registro padre, se eliminan los registros dependientes (en nuestro caso, los registros de citas son dependientes de los registros de usuarios)

-----

SET NULL -> eliminando un registro padre, la referencia en los registros dependientes queda con valor NULL

1. editar la FK usuarioId de citas
2 On Update (que va a pasar cuando el usuario se edite...) -> SET NULL
3 On Delete (que va a pasar cuando el usuario se elimine...) -> SET null

----

VIDEO 461

"Active Record mantiene una referencia en memoria, crea un objeto que es exactamente igual a lo que tenemos en la base de datos"

* se habia olvidado de crear el campo password en usuarios
* lo creo desde tableplus con # = 5 y al guardar cambios password se coloque como 5ta columna, corriendo a las que le siguen una posicion a la derecha 

----- 

VIDEO 468 

password_hash($string, PASSWORD_DEFAULT);
password_hash($string, PASSWORD_BCRYPT);

* funcion PHP para hashear strings (usually use to hash passwords)

----- 

VIDEO 469

Vamos a implementar el registro por e-mail basado en Tokens 

el profesor usa la funcion PHP uniqid(), que genera un string alfanumerico de 13 digitos.

*** ver consultas del video, ya que un alumno dice que esta funcion puede generar exactamente el mismo token (string) si dos usuarios crean un usuario exactamente al mismo tiempo desde 2 servidores distintos.
*** como solucion, sugiere usar la combinacion de funciones PHP bin2hex(random_bytes(8))
*** ver y probar con el script de abajo e ir a la fuente para leer respuesta de otro alumno y documentacion adjunta vvv

echo '<pre>';
for($i=0;$i<20;$i++) {
    echo uniqid(), PHP_EOL;
    //echo bin2hex(random_bytes(8)), PHP_EOL, PHP_EOL;
}
echo '</pre>';

*** lo que creo entender es que la funcion unqid() genera alfanumericos "determinados" o "fijos" en el tiempo; con el for(){} de arriba se ve claramente que los tokens generados por uniqid() van difiriendo muy de a poco y eso explica el planteo del primer alumno

----- 

VIDEO 470 

el profesor de arranque usa el termino "bannear" cuando habla sobre la capa de seguridad que agregamos con el tema de enviarle un token al usuario para asegurarnos que no es un bot el que esta registrando usuarios en nuestra db -> escuchar y comprender que es lo que esta explicando

----- 

"vamos a estar usando MailTrap de nuevo para probar los emails" 

"vamos a instalar la extension de PHPMailer" vvv 

composer require phpmailer/phpmailer
* coon este comando instalo la libreria phpmailer en el proyecto (en los hechos, se creo la carpeta /vendor/phpmailer, que es lo que llamamos "libreria", "dependencia", "extension", etc.)

composer update -> mensaje por consola vvv 

Loading composer repositories with package information
Updating dependencies
Nothing to modify in lock file
Installing dependencies from lock file (including require-dev)
Nothing to install, update or remove
Generating autoload files
1 package you are using is looking for funding.
Use the `composer fund` command to find out more!
No security vulnerability advisories found

*** al respecto de composer update -> "instalé una nueva dependencia y la actualizo para que el archivo /vendor/autoload.php ya cargue esta libreria que acabamos de instalar"

*** APRENDIZAJE -> instalo una libreria/dependencia/extension en un proyecto PHP -> acto seguido corro composer update para que funcione el autoload de clases

* creo la carpeta /classes y dentro la clase "helper" Email (/classes/Email.php), que nos va a permitir enviar un email
* esta clase va a contener toda la configuracion para enviar emails correctamente, que vimos en bienes raices (y en los proyectos locales de prueba phpmailer y phpmailer2023)

* modifique el "autoload" del composer.json para agregar el namespace de /classes, asi que luego vuelvo a correr composer update para actualizar nuestro autoload vvv

"autoload": {
    "psr-4": {
        "MVC\\": "./",
        "Controllers\\": "./controllers",
        "Model\\": "./models",
        "Classes\\": "./classes"
    }
},

----- 

VIDEO 471 

ENVIAR MAIL DE CONFIRMACION DE CUENTA AL USUARIO LUEGO DE GENERAR EL TOKEN DE SEGURIDAD:

En el VIDEO 426 pregunte vvv

Hola. En $mail->addAddress('xxx', 'xxxx'); coloqué una casilla de correo donde quiero que lleguen los correos que se envían desde el formulario de contacto de la app y no están llegando. Si llegan correctamente al inbox de Mailtrap. Como lo soluciono?

Respuesta de un profesor asistente vvv 

Mailtrap es un servidor de pruebas, por lo que sin importar a que correo quieras enviarlo, si usas el servidor smtp de mailtrap siempre llegaran a la bandeja de tu mailtrap.

Puedes usar servicios como https://sendinblue.com/ para enviar correos reales, en este caso el destinatario si debe ser un correo real y existente al que tengas acceso para comprobarlo.

-----

VIDEO 472

* Retomé el curso el 11/5/23 en este video (esta explicando cosas del registro de usuarios)

----- 

VIDEO 473 

array_shift() -> funcion PHP que elimina y retorna el primer elemento de un array 

formato del array de $alertas (mensaje de error, exito, etc, en los envíos de datos desde formularios) en ActiveRecord.php vvv

array(1) {
  ["error"]=>
  array(5) {
    [0]=>
    string(24) "El nombre es obligatorio"
    [1]=>
    string(26) "El apellido es obligatorio"
    [2]=>
    string(27) "El teléfono es obligatorio"
    [3]=>
    string(23) "El email es obligatorio"
    [4]=>
    string(64) "El password es obligatorio y debe contener al menos 6 caracteres"
  }
}

*** en /views/templates/alertas.php tenemos el template que reutilizamos para renderizar las alertas

-----

VIDEO 475

en Usuario.php/validarLogin() vvv

self::$alertas -> atributo proteced y static (array vacío) heredado de ActiveRecord con la finalidad de notificar al cliente de posibles errores, cargando eventualues mensajes de error en dicho array para que se muestren por pantalla llegado el caso.

-----

VIDEO 476 

- password_hash($string, PASSWORD_DEFAULT) -> funcion nativa PHP para hashear un password al momento de crear un usuario nuevo en la DB

- password_hash($string, PASSWORD_BCRYPT) -> funcion nativa PHP para hashear un password al momento de crear un usuario nuevo en la DB

- password_verify($string_no_hasheado, $string_hasheado) -> funcion nativa PHP para validar passwords en un login

----- 

VIDEO 478

* Comentario de un alumno en el VIDEO 469, relacionado al VIDEO 478 vvv

Por cierto, en el capítulo 478, la función "s" para sanitizar el HTML tampoco es tan fiable. Yo usé ctype_alnum

if(!ctype_alnum($token)) 
{
    // token no válido
}

-----

VIDEO 488 

Estilos para el formulario de la vista "/cita" vvv 

/src/scss/componentes/_formulario.scss

Luego crea un nuevo nuevo .scss para definir estilos de "/cita" vvv
/src/scss/layout/_cita.scss 

-----

VIDEO 489 

* darken & lighten -> mixins de SASS vvv

background-color: darken(v.$azul, 10%);
background-color: lighten(v.$azul, 10%);

----- 

data recuperada del proyecto frontend FESTIVAL DE MUSICA vvv 

Como crear un snippet en VSCode:
Ctrl + Shift + P (en Windows)
Buscar "Snippets: Configure User Snippets"
Buscar "scss.json (SCSS)"
Es un json para configurar snippets de scss.
Ver el archivo "scss.json (SCSS)" y repasar el video si hace falta (VIDEO 178)

-----

VIDEO 490 

/views/cita/index.php -> &laquo -> "esto se conoce como ENTIDAD"

---- 

VIDEO 491 

/views/layout.php vvv 

<?php echo $script ?? ''; ?>

* de esta manera estamos diciendo "imprimí $script, si no existe, no imprimas nada"
* es una especie de if ternario
* a "??" le llamamos placeholder

----- 

VIDEO 492 

en /src/js/app.js vvv 

document.addEventListener('DOMContentLoaded', () => {
  * aca va a ir todo nuestro codigo JS, 
});

* 'DOMContentLoaded' es un evento en JavaScript que se dispara cuando el árbol DOM (Documento Object Model) de una página web ha sido completamente cargado y parseado. 
  El evento 'DOMContentLoaded' ocurre después de que el navegador ha construido el árbol DOM a partir del código HTML de la página, pero antes de que se hayan descargado todos los recursos externos, como imágenes o scripts adicionales.

----- 

VIDEO 495

Comentario util jQuery usuario vvv

Para los que usen JQuery. -> Buenas, gente.

En el día de hoy les traigo el mismo código que contiene la misma funcionalidad del tab; pero agregada con JQuery en este proyecto.

Tabs()
{
    return $('.btn-tab').on("click", (e) => {
    e.preventDefault();
    let step = parseInt(e.target.dataset.step);
        this.ShowSection(step);
    })        
}
 
ShowSection(section)
{
    $('.show').removeClass('show');
    $(`.btn-tab`).removeClass('actual');
    $(`[data-step="${section}"]`).addClass('actual');
    $(`#step-${section}`).addClass('show');
}
NOTA: Pueden agregar JQuery por medio de un CDN (link:  Link para JQuery.), para que no batallen y puedan usar AJAX. Ya en caso de que lo quieran agregar con NPM y quieran agregar otras librerías como SweetAlert2, deben de hacer una configuración extra con Webpack y modificar el gulpfile; pero requiere de conocimientos acerca de ES6.

----- 

VIDEO 497

API = Application Programming Interface (capa de abstraccion)

Ayuda memoria:

Creamos el endpoint /api/servicios
el controlador del endpoint vvv 
- ejecuta el metodo estatico all() (puede ser invocado sin instanciar la clase o el modelo) del modelo Servicio -> herencia del modelo ActiveRecord

***
- all() le pasa la consulta SQL (SELECT * FROM servicios) a consultarSQL
- consultarSQL invoca a $db, que es un objeto instancia de la conexión a la DB (supongo que una clase), y a un metodo propio del objeto, query(), que recibe el string de una consulta SQL y lo ejecuta en la DB 
- iteramos el resultado de la consulta con un while y el metodo fetch_assoc() del objeto/instancia de mysqli $resultado 
- cada iteracion es un registro de la respuesta de la consulta, en formato array asociativo
- cada uno de estos registros (array asociativos), se lo pasamos al metodo crearObjeto(), que los convierte en un objeto/instancia del modelo/clase Servicio 
- vamos almacenando en $array estos objetos
- liberamos la memoria con $resultado->free(); ???

all() -> consultarSQL() -> crearObjeto()
*** 

la ejecucion de all() la guarda en $servicios, y el metodo del endpoint termina retornando un json de ese array de objetos con la funcion nativa de PHP json_encode()

----- 

VIDEO 499

javaScript - funciones asíncronas - Async Await

- ejemplo didactico de para que puede servir un bloque try cath
- si intento imprimir una variable no definida, js me tira error y deja de ejecutarse el codigo a partir de esa linea
- si en cambio, esto mismo lo hago dentro de un try catch, este error no cortara la ejecucion del codigo que sigue
try {
    console.log(respuesta);
} catch (error) {
    console.log(error);
}

----- 

VIDEO 500

ejemplo de destructuring en JS vvv
const objeto = {
    nombre: "Lionel",
    apellido: "Prats",
    edad: "37"
}

const {nombre, apellido} = objeto;

console.log(`Hola ${nombre} ${apellido}!!`);

-----

VIDEO 501

agregué snippet para el mixin grid (SCSS / SASS):

1) Ctrl + shift + "P"
2) Click en "Snippets: Configure User Snippets"
3) Click en scss.json
4) Agrego al .json la configuración del nuevo snippet vvv 
"grid": {
  "prefix": "grid",
  "body": [
    "@include m.grid($1, $2);"
  ]
}

-----

VIDEO 502

/src/js/app.js -> gran explicacion con un ejemplo de como usar destructuring y el spread operator de javaScript vvv 

1) 
const {servicios} = cita;
* extraigo en la variable servicios, la propiedad 'servicios' del objeto 'cita' (declarado al inicio del archivo) usando destructuring de javaScript

2) 
cita.servicios = [...servicios, servicio];
* reescribo el array cita.servicios usando el spread operator de javaScript 
* con esta tecnica, al hacer click sobre un <div>, cita.servicios quedara constituido por el contenido previo al click + el nuevo servicio seleccionado por el usuario
* es decir, en cita.servicio se ira agregando cada servicio que el usuario vaya seleccionando desde la pantalla 

OBSERVACION:
* aparentemente se podría haber hecho lo mismo con una sola linea de código vvv 
cita.servicios.push(servicio);

-----

VIDEO 503

repasando algo anterior vvv 

document.querySelector(`[data-paso="${paso}"]`); (/src/js/app.js)
* este selector es un "selector de atributo"; captura cualquier <element data-paso="${paso}">
